wd
wd()
??wd
getwd()
setwd("/Users/fair/GenomicDataSci-JHU/Bioconductor_wk1")
getwd()
ir1 <- IRanges(start = c(1,3,5),end = c(3,5,7))
biocLite(GRanges)
biocLite(IRanges)
library(GenomicFeatures)
??GRanges
biocLite("IRanges")
biocLite("GenomicRanges")
ir1 <- IRanges(start = c(1,3,5),end = c(3,5,7))
library(IRanges)
ir1 <- IRanges(start = c(1,3,5),end = c(3,5,7))
help(library)
ir1
start(ir1)
width(ir2) <- 1
ir2 <- IRanges(start = c(1,3,5),width = 3)
ir2
width(ir2) <- 1
ir2
dim(ir1)
length(ir2)
names(ir1) <- paste("A",1:3,sep = "")
ir1
c(ir1,ir2)
plotRanges <- fuction(x, xlim = x, main = deparse(substitute(x)),col = "black",sep = 0.5,...){
height <- 1
if (is(xlim, "Ranges"))
xlim <- c(min(start(xlim)),max(end(xlimn)))
bins <- disjointBins(IRanges(start(x),end(x)+1))
plot.new()
plot.window(xlim,c(0,max(bin)*(hight+sep)))
ybottom <- bins * (sep+height)-height
rect(start(x)-0.5,ybottom,end(x)+0.5,ybottom+height,col = col,...)
title(main)
axis(1)
}
plotRanges <- fuction(x, xlim = x, main = deparse(substitute(x)),col = "black",sep = 0.5, ...){
height <- 1
if (is(xlim, "Ranges"))
xlim <- c(min(start(xlim)),max(end(xlimn)))
bins <- disjointBins(IRanges(start(x),end(x)+1))
plot.new()
plot.window(xlim,c(0,max(bin)*(hight+sep)))
ybottom <- bins * (sep+height)-height
rect(start(x)-0.5,ybottom,end(x)+0.5,ybottom+height,col = col,...)
title(main)
axis(1)
}
plotRanges <- function(x, xlim = x, main = deparse(substitute(x)),col = "black",sep = 0.5, ...){
height <- 1
if (is(xlim, "Ranges"))
xlim <- c(min(start(xlim)),max(end(xlimn)))
bins <- disjointBins(IRanges(start(x),end(x)+1))
plot.new()
plot.window(xlim,c(0,max(bin)*(hight+sep)))
ybottom <- bins * (sep+height)-height
rect(start(x)-0.5,ybottom,end(x)+0.5,ybottom+height,col = col,...)
title(main)
axis(1)
}
par(mfrow = c(2,1))
ir <- IRange(start = c(1,3,7,9),end = c(4,4,8,10))
plotRanges(ir)
par(mfrow = c(2,1))
ir <- IRanges(start = c(1,3,7,9),end = c(4,4,8,10))
plotRanges(ir)
plotRanges <- function(x, xlim = x, main = deparse(substitute(x)),col = "black",sep = 0.5, ...){
height <- 1
if (is(xlim, "Ranges"))
xlim <- c(min(start(xlim)),max(end(xlim)))
bins <- disjointBins(IRanges(start(x),end(x)+1))
plot.new()
plot.window(xlim,c(0,max(bin)*(hight+sep)))
ybottom <- bins * (sep+height)-height
rect(start(x)-0.5,ybottom,end(x)+0.5,ybottom+height,col = col,...)
title(main)
axis(1)
}
par(mfrow = c(2,1))
ir <- IRanges(start = c(1,3,7,9),end = c(4,4,8,10))
plotRanges(ir)
plotRanges <- function(x, xlim = x, main = deparse(substitute(x)),col = "black",sep = 0.5, ...){
height <- 1
if (is(xlim, "Ranges"))
xlim <- c(min(start(xlim)),max(end(xlim)))
bins <- disjointBins(IRanges(start(x),end(x)+1))
plot.new()
plot.window(xlim,c(0,max(bins)*(hight+sep)))
ybottom <- bins * (sep+height)-height
rect(start(x)-0.5,ybottom,end(x)+0.5,ybottom+height,col = col,...)
title(main)
axis(1)
}
par(mfrow = c(2,1))
ir <- IRanges(start = c(1,3,7,9),end = c(4,4,8,10))
plotRanges(ir)
ir1 <- IRanges(start = c(1,3,5),width = 1)
ir2 <- IRanges(start = c(4,5,6),width = 1)
ir1
ir2
union(ir1,ir2)
reduce(c(ir1,ir2))
intersect(ir1,ir2)
ir1 <- IRanges(start = c(1,4,8),end = c(3,7,10))
ir2 <- IRanges(start = c(3,4),width = 3)
ir1
ir2
ov <- findOverlaps(ir1,ir2)
ov
sessionInfo()
help(nearest)
help(IRanges.nearest)
??IRanges.nearest
help("nearest")
library("GenomicRanges")
gr = GRanges(seqnames = c("chr1"),strand = c("+","-","+"),ranges = IRanges(start = c(1,3,5),width = 3))
gr
flank(gr,5)
promoters(gr)
gaps(gr)
seqlengths(gr) = c("chr1" = 10)
gaps(gr)
seqlevels(gr) = c("chr1","chr2")
seqnames(gr) = c("chr1","chr2","chr1")
gr
sort(gr)
genome(gr) = "hg19"
seqinfo(gr)
gr = GRanges(seqnames = c("chr1"),strand = c("+","-","+"),ranges = IRanges(start = c(1,3,5),width = 3))
values(gr) = DataFrame(score = rnrom(3))
gr
gr = GRanges(seqnames = c("chr1"),strand = c("+","-","+"),ranges = IRanges(start = c(1,3,5),width = 3))
values(gr) = DataFrame(score = rnorm(3))
gr
gr$score
gr = GRanges(seqnames = c("chr1","chr2","chr2"),strand = c("+","-","+"),ranges = IRanges(start = c(1,3,5),width = 3))
gr
gr = GRanges(seqnames = c("chr1","chr2","chr2"),strand = c("+","-","+"),ranges = IRanges(start = c(1,3,5),width = 3))
dropSeqlevels(gr,"chr2")
dropSeqlevels(gr,c("chr1","chr2"))
dropSeqlevels(gr,"chr1")
gr = GRanges(seqnames = c("chr1","chr2","chr2"),strand = c("+","-","+"),ranges = IRanges(start = c(1,3,5),width = 3))
seqlevels(gr,force = TRUE) = "chr1"
gr
keepSeqlevels(gr,"chr1")
keepSeqlevels(gr,"chr1",pruning.mode = T)
keepSeqlevels(gr,"chr1",pruning.mode = "coarse")
gr
dropSeqlevels(gr,"chr2",pruning.mode = "coarse")
seqlevels(gr,force = TRUE) = "chr1"
help("seqlevels")
seqlevels(gr,pruning.mode = "coarse") = "chr1"
gr
newStyle = mapSeqlevels(seqlevels(gr),"NCBI")
newStyle
gr = renameSeqlevels(gr, newStyle)
gr
gr = GRanges(seqnames = c("chr1","chr2","chr2"),strand = c("+","-","+"),ranges = IRanges(start = c(1,3,5),width = 3))
newStyle = mapSeqlevels(seqlevels(gr),"NCBI")
newStyle
gr = renameSeqlevels(gr, newStyle)
gr
biocLite("AnnotationHub")
library(AnnotationHub)
library(AnnotationHub)
library("GenomicRanges")
library(GenomicRanges)
ah = AnnotationHub()
ah
ah[1]
ah[[1]]
biocLite("Rsamtools")
library(AnnotationHub)
ahub = AnnotationHub()
ahub = subset(ahub, species = "Homo sapiens")
qhs = query(ahub, c("H3K4me3","Gm12878"))
gr1 = qhs[[2]]
gr2 = qhs[[4]]
summary(width(gr1))
summary(width(gr2))
table(width(gr2))
## Retrive peaks
peaks = gr2
qhs[4]
# Find reference genes
qhs = query(ahub,"RefSeq")
qhs$genomes
genes = qhs[[1]]
# Find promoters in ref genes
prom = promoters(genes)
table(width(prom))
promoters
peaks
peaks = gr2
gr2 = qhs[[4]]
peaks = gr2
qhs = query(ahub,"RefSeq")
qhs$genomes
genes = qhs[[1]]
biocLite("rtracklayer")
ahub = AnnotationHub()
query(ahub,"CpG Islands")
gr = query(ahub,"CpG Islands")
ge$genomes
gr$genomes
gr$genome
gr = subset(ahub, species= "CpG Islands")
gr = query(ahub,"CpG Islands")
gr
gr$genome
gr[1]
gr[[1]]
peaks = gr[[1]]
peaks
qhs = query(ahub,c("H1 cell line","E003")
)
qhs = query(ahub,c("H1 cell line","E003"))
qhs
qhs = query(ahub,c("H1 cell line"))
qhs
peaks
gr
gr$genome
qhs = query(subset(ahub,species="H1 cell line"),c("H3K4me3"))
qhs = query(subset(ahub,species="H1 cell"),c("H3K4me3"))
qhs = query(ahub,c("H3K4me3","H1 cells"))
qhs
H1_cell = qhs[[2]]
H1_cell
peaks
CpG = gr[[1]]
CpG_on_autosome = seqlevels(CpG,pruning.mode = "coarse")
CpG_on_autosome = seqlevels(CpG,pruning.mode = "Coarse")
seqlevels(CpG)
autosome = c("chr1","chr2","chr3","chr4","chr5","chr6","chr7","chr8","chr9","ch10","chr11","chr12","chr13","chr14","chr15","chr16","chr17","chr18","chr19","chr20","chr21","chr22")
keepSeqlevels(gr,autosome,pruning.mode = "coarse")
keepSeqlevels(gr,autosome,pruning.mode = "coarse")
gr
keepSeqlevels(CpG,autosome,pruning.mode = "coarse")
autosome = c("chr1","chr2","chr3","chr4","chr5","chr6","chr7","chr8","chr9","chr10","chr11","chr12","chr13","chr14","chr15","chr16","chr17","chr18","chr19","chr20","chr21","chr22")
keepSeqlevels(CpG,autosome,pruning.mode = "coarse")
dim(keepSeqlevels(CpG,autosome,pruning.mode = "coarse"))
length(keepSeqlevels(CpG,autosome,pruning.mode = "coarse"))
length(keepSeqlevels(CpG,"chr4",pruning.mode = "coarse"))
raw_H1_cell = qhs[[2]]
H1_cell = keepSeqlevels(CpG,autosome,pruning.mode = "coarse")
sum(width(reduce(H1_cell, ignore.strand = TRUE)))
H1_cell
sum(width(H1_cell))
raw_H1_cell
autosome <- c(paste("chr", 1:22, sep="")
)
H1_cell = keepSeqlevels(CpG,autosome,pruning.mode = "coarse")
sum(width(H1_cell))
qhs = query(ahub,c("H3K4me3","H1 cells"))
qhs
raw_H1_cell
seqinfo(raw_H1_cell)
H1_cell = keepSeqlevels(raw_H1_cell,autosome,pruning.mode = "coarse")
sum(width(H1_cell))
mean(H1_cell$signalValue)
H1_cell
qhs2 = query(ahub,c("H3K27me4","H1 cells"))
qhs2
qhs2 = query(ahub,c("H3K27me3","H1 cells"))
qhs2
qhs2 = query(ahub,c("H3K27me3","H1 cells"))
raw_H1_cell2 = qhs2[[2]]
H1_cell = keepSeqlevels(raw_H1_cell2,autosome,pruning.mode = "coarse")
mean(H1_cell2$signalValue)
H1_cell2 = keepSeqlevels(raw_H1_cell2,autosome,pruning.mode = "coarse")
mean(H1_cell2$signalValue)
H1_cell = keepSeqlevels(raw_H1_cell,autosome,pruning.mode = "coarse")
sum(width(H1_cell))
inOut = matrix(0, ncol=2,nrow=2)
colnames(inOut) = c("in","out")
rownames(inOut) = c("in","out")
inOut[1,1] = sum(width(intersect(H1_cell,H1_cell2,ignore.strand = TRUE))) ## number of bases in both H3K4me3 and H3K27me3
inOut[1,1]
intersect(H1_cell,H1_cell2,ignore.strand = TRUE)
Bivalent = intersect(H1_cell,H1_cell2,ignore.strand = TRUE)
sum(width(Bivalent))
CpG_auto = length(keepSeqlevels(CpG,autosome,pruning.mode = "coarse"))
ov = subsetByOverlaps(Bivalent,CpG_auto)/length(Bivalent)
subsetByOverlaps(Bivalent,CpG_auto,ignore.strand = TRUE)/length(Bivalent)
Bivalent
CpG_auto
CpG_auto = keepSeqlevels(CpG,autosome,pruning.mode = "coarse")
subsetByOverlaps(Bivalent,CpG_auto,ignore.strand = TRUE)/length(Bivalent)
CpG_auto
Bivalent
length(Bivalent)
findOverlaps(Bivalent,CpG_auto)
subsetByOverlaps(Bivalent,CpG_auto,ignore.strand = TRUE)
length(subsetByOverlaps(Bivalent,CpG_auto,ignore.strand = TRUE))/length(Bivalent)
Bivalent_CpG = intersect(Bivalent,CpG_auto,ignore.strand = TRUE)
sum(width(Bivalent_CpG))
sum(width(Bivalent_CpG))/length(CpG_auto)
sum(width(Bivalent_CpG))/length(width(CpG_auto))
sum(width(Bivalent_CpG))/sum(width(CpG_auto))
help(resize)
"resize,GenomicRanges-method"
help(sum(width(Bivalent_CpG))/sum(width(CpG_auto)))
help("resize,GenomicRanges-method")
inOut = matrix(0, ncol=2,nrow=2)
colnames(inOut) = c("in","out")
rownames(inOut) = c("in","out")
inOut[1,1] = sum(width(intersect(Bivalent,CpG_auto,ignore.strand = TRUE)))
inOut[1,2] = sum(width(setdiff(Bivalent,CpG_auto,ignore.strand = TRUE))) ## number of bases only in Bivalent
inOut[2,1] = sum(width(setdiff(CpG_auto,Bivalent,ignore.strand = TRUE))) ## number of bases only in CpG
inOut[2,2] = 3*10^9 - sum(inOut)
oddsRatio = inOut[1,1] * inOut[2,2] / (inOut[2,1] * inOut[1,2])
oddsRatio
ahub
subset(ahub, species = "Human")
subset(ahub, species = "human")
query(ahub,"hg19")
query(ahub,"CpG Islands")
CpG
gr[1]
gr[[1]]
CpG_resize = resize(CpG_auto, width(CpG_auto+10000), fix="center")
Bivalent_CpG_resize = intersect(Bivalent,CpG_resize,ignore.strand = TRUE)
sum(width(Bivalent_CpG_resize))
CpG_auto
CpG_resize
query(ahub,"hg19")
query(subset(ahub,species="Homo sapiens","hg19")
)
query(subset(ahub,species="Homo sapiens"),"hg19")
subset(ahub,species="Homo sapiens")
bhub = subset(ahub,species="Homo sapiens")
ahub = AnnotationHub()
ahub = subset(ahub, species = "Homo sapiens")
query(subset(ahub,species=="Homo sapiens"),"hg19")
human_hg19 = query(subset(ahub,species=="Homo sapiens"),"hg19")
human_hg19
seqlengths(human_hg19)
seqlengths(CpG_auto)
gr
gr$genome
sum(as.numeric(seqlengths(CpG_auto)))
genome_h19 = sum(as.numeric(seqlengths(CpG_auto)))
genome_h19 = sum(as.numeric(seqlengths(CpG_auto)))/3*10^9
genome_h19 = sum(as.numeric(seqlengths(CpG_auto)))
genome_h19/3*10^9
inOut[2,2] = genome_h19 - sum(inOut)
oddsRatio = inOut[1,1] * inOut[2,2] / (inOut[2,1] * inOut[1,2])
oddsRatio
genome_h19 = sum(as.numeric(seqlengths(CpG)))
genome_h19/3*10^9
genome_h19/(3*10^9)
genome_h19 = sum(as.numeric(seqlengths(CpG_auto)))
genome_h19/(3*10^9)
seqlengths(CpG)
genome_h19 = sum((seqlengths(CpG_auto)))
genome_h19 = sum(as.numeric(seqlengths(CpG_auto)))
genome_h19 = sum(as.numeric(seqlengths(CpG)))
genome_h19
inOut[2,2] = genome_h19 - sum(inOut)
oddsRatio = inOut[1,1] * inOut[2,2] / (inOut[2,1] * inOut[1,2])
oddsRatio
genome_h19 = sum(as.numeric(seqlengths(CpG_auto)))
genome_h19
inOut[2,2] = genome_h19 - sum(inOut)
oddsRatio = inOut[1,1] * inOut[2,2] / (inOut[2,1] * inOut[1,2])
oddsRatio
genome_h19 = sum(as.numeric(seqlengths(CpG_auto)))
genome_h19
seqlengths(CpG_auto)
query(subset(ahub,species=="Homo sapiens"),"hg19")
genome_h19/ (3*10^10)
seqlengths(CpG_auto)
genome_h19 = sum(as.numeric(seqlengths(CpG_auto)))
genome_h19/ (3*10^10)
gr
gr$genome
CpG_auto
inOut[1,1] = sum(width(intersect(Bivalent,CpG_auto,ignore.strand = TRUE)))
inOut[1,2] = sum(width(setdiff(Bivalent,CpG_auto,ignore.strand = TRUE))) ## number of bases only in Bivalent
inOut[2,1] = sum(width(setdiff(CpG_auto,Bivalent,ignore.strand = TRUE))) ## number of bases only in CpG
inOut[2,2] = 30*10^9 - sum(inOut)
oddsRatio = inOut[1,1] * inOut[2,2] / (inOut[2,1] * inOut[1,2])
oddsRatio
genome_h19 = sum(as.numeric(seqlengths(CpG_auto)))
genome_h19*0.006040689
genome_h19/0.006040689
genome_h19/0.005185928
query(ahub,"hg19")
g = query(ahub,"hg19")
g[1]
g[[1]]
test = g[[1]]
seqlengths(test)
test = keepSeqlevels(test, autosome,pruning.mode = "coarse")
seqlengths(test)
whole = sum(as.numeric(test))
whole = sum(as.numeric(seqlengths(test)))
genome_h19/whole
seqlengths(test) == seqlengths(CpG_auto)
CpG_auto
sum(width(CpG_auto))/sum(as.numeric(seqlengths(CpG_auto)))
fisher.test(inOut)
inOut[1,1] = sum(width(intersect(Bivalent,CpG_auto,ignore.strand = TRUE)))
inOut[1,2] = sum(width(setdiff(Bivalent,CpG_auto,ignore.strand = TRUE))) ## number of bases only in Bivalent
inOut[2,1] = sum(width(setdiff(CpG_auto,Bivalent,ignore.strand = TRUE))) ## number of bases only in CpG
inOut[2,2] = sum(as.numeric(seqlengths(CpG_auto)))  - sum(inOut)
oddsRatio = inOut[1,1] * inOut[2,2] / (inOut[2,1] * inOut[1,2])
oddsRatio
sum(inOut)
inOut = matrix(0, ncol=2,nrow=2)
colnames(inOut) = c("in","out")
rownames(inOut) = c("in","out")
inOut[1,1] = sum(width(intersect(Bivalent,CpG_auto,ignore.strand = TRUE)))
inOut[1,2] = sum(width(setdiff(Bivalent,CpG_auto,ignore.strand = TRUE))) ## number of bases only in Bivalent
inOut[2,1] = sum(width(setdiff(CpG_auto,Bivalent,ignore.strand = TRUE))) ## number of bases only in CpG
inOut[2,2] = sum(as.numeric(seqlengths(CpG_auto)))  - sum(inOut)
oddsRatio = inOut[1,1] * inOut[2,2] / (inOut[2,1] * inOut[1,2])
sum(inOut)
oddsRatio
setwd("/Users/fair/GenomicDataSci-JHU/Bioconductor_wk2")
getwd()
library(Biostrings)
dna1 = DNAString("ACGT-G")
dna1
dna2 = DNAStringSet(c("ACG","ACGT","ACGTT"))
dna2
IUPAC_CODE_MAP
names(dna2) = paste0("seq",1:3)
dna2
alphabetFrequency(dna2)
letterFrequency(dna2, letter = "GC")
dinucleotideFrequency(dna2)
consensusMatrix(dna2)
library(BSgenome)
biocLite("BSgenome")
library(BSgenome)
available.genomes()
library("BSgenome.Scerevisiae.UCSC.sacCer2")
library(BSgenome.Scerevisiae)
library("BSgenome.Scerevisiae.UCSC.sacCer2")
Scerevisia
available.genomes()
Scerevisia = available.genomes()[[77]]
Scerevisia
Scerevisia[1]
library(BSgenome.Scerevisia)
library(BSgenome.Scerevisiae)
biocLite("BSgenome.Scerevisia")
biocLite("BSgenome.Scerevisiae")
biocLite("BSgenome.Scerevisia")
biocLite("BSgenome.Scerevisiae")
BSgenome.Scerevisia
dnaseq == reverseComplement(dnaseq)
dnaseq <- DNAString("ACGTACGT")
dnaseq == reverseComplement(dnaseq)
library(AnnotationHub)
ahub = AnnotationHub()
qh = query(ahub,c("sacCer2","genes"))
qh
genes = qh[[1]]
prom = promoters(genes)
prom
prom = trim(prom)
prom
promViews = Views(Scerevisiaa,prom)
rl = Rle(c(1,1,1,1,1,1,2,2,2,2,2,4,4,2))
rl
runLength(rl)
runValue(rl)
as.numeric(rl)
ir = IRanges(start = c(2,8),width = 4)
ir
aggregate(rl,ir,FUN = mean)
??coverage
x <- IRanges(start=c(-2L, 6L, 9L, -4L, 1L, 0L, -6L, 10L),
width=c( 5L, 0L, 6L,  1L, 4L, 3L,  2L,  3L))
x
coverage(x)
x = IRanges(4:6,width = 3)
x
coverage(x)
x = IRanges(4,width = 3)
x
coverage(x)
gl
gr1 <- GRanges(seqnames = "chr1", ranges = IRanges(start = 1:4,width = 3))
gr2 <- GRanges(seqnames = "chr2", ranges = IRanges(start = 1:4,width = 3))
gL = GRangesList(gr1 = gr1, gr2 = gr2)
gl
gL
gr1 <- GRanges(seqnames = "chr1", ranges = IRanges(start = 1:4,width = 3))
gr2 <- GRanges(seqnames = "chr2", ranges = IRanges(start = 1:4,width = 3))
gL = GRangesList(gr1 = gr1, gr2 = gr2)
gL
start(gL)
seqnames(gL)
elementLengths(gL)
sapply(gL,length)
??overlaps
??findOverlaps
library(GenomicFeature)
library(GenomicFeatures)
biocLite(GenomicFeatures)
biocLite("GenomicFeatures")
library(GenomicFeatures)
biocLite("GenomicFeatures")
